{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD","NAME","LENGTH","App","useState","sortField","setSortField","reverse","setReversed","visibleGoods","goodsFrom","goods","sort","a","b","localeCompare","length","getPreparedGoods","reset","getReset","setSort","field","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"mOAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAgCF,IAAMC,EAAa,CACjBC,KAAM,OACNC,OAAQ,UAGGC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA+BF,oBAAS,GAAxC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EAtCR,SAA0BC,EAAWL,EAAWE,GAC9C,IAAMI,EAAK,YAAOD,GAqBlB,OAnBIL,GACFM,EAAMC,MAAK,SAACC,EAAGC,GACb,OAAQT,GACN,KAAKL,EAAWC,KACd,OAAOY,EAAEE,cAAcD,GAEzB,KAAKd,EAAWE,OACd,OAAOW,EAAEG,OAASF,EAAEE,OAEtB,QACE,OAAO,MAKXT,GACFI,EAAMJ,UAGDI,EAgBcM,CAAiBlB,EAAiBM,EAAWE,GAC5DW,EAdR,SAAkBb,EAAWE,GAC3B,MAAqB,KAAdF,GAAoBE,EAabY,CAASd,EAAWE,GAO5Ba,EAAU,SAAAC,GAAK,OAAI,WACvBf,EAAae,KAOf,OACE,mCACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEjB,IAAcL,EAAWC,KACrB,iBACA,0BAENuB,QAASJ,EAAQpB,EAAWC,MAP9B,iCAYA,wBACEsB,KAAK,SACLD,UACEjB,IAAcL,EAAWE,OACrB,iBACA,0BAENsB,QAASJ,EAAQpB,EAAWE,QAP9B,4BAYA,wBACEqB,KAAK,SACLD,UAAWf,EAAU,iBAAmB,0BACxCiB,QAnCQ,WAChBhB,GAAaD,IA+BP,qBAQCW,GACC,wBACEK,KAAK,SACLD,UAAU,4BACVE,QArDM,WAChBhB,GAAY,GACZF,EAAa,KAgDL,sBAUJ,6BACGG,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,cCtHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.af55a8bb.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport { useState } from 'react';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(goodsFrom, sortField, reverse) {\n  const goods = [...goodsFrom];\n\n  if (sortField) {\n    goods.sort((a, b) => {\n      switch (sortField) {\n        case SORT_FIELD.NAME:\n          return a.localeCompare(b);\n\n        case SORT_FIELD.LENGTH:\n          return a.length - b.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    goods.reverse();\n  }\n\n  return goods;\n}\n\nfunction getReset(sortField, reverse) {\n  return sortField !== '' || reverse;\n}\n\nconst SORT_FIELD = {\n  NAME: 'name',\n  LENGTH: 'length',\n};\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverse, setReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField, reverse);\n  const reset = getReset(sortField, reverse);\n\n  const resetSort = () => {\n    setReversed(false);\n    setSortField('');\n  };\n\n  const setSort = field => () => {\n    setSortField(field);\n  };\n\n  const onReverse = () => {\n    setReversed(!reverse);\n  };\n\n  return (\n    <>\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={\n              sortField === SORT_FIELD.NAME\n                ? 'button is-info'\n                : 'button is-info is-light'\n            }\n            onClick={setSort(SORT_FIELD.NAME)}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={\n              sortField === SORT_FIELD.LENGTH\n                ? 'button is-info'\n                : 'button is-info is-light'\n            }\n            onClick={setSort(SORT_FIELD.LENGTH)}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={reverse ? 'button is-info' : 'button is-info is-light'}\n            onClick={onReverse}\n          >\n            Reverse\n          </button>\n\n          {reset && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={resetSort}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n\n        <ul>\n          {visibleGoods.map(good => (\n            <li\n              key={good}\n              data-cy=\"Good\"\n            >\n              {good}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}